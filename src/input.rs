use macaw as m;

#[derive(Debug, Copy, Clone)]
pub enum InputEvent {
    Key(KeyEvent),
    /// Contains mouse movement delta.
    MouseMotion((f64, f64)),
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct KeyEvent {
    pub key: Key,
    pub state: KeyState,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum KeyState {
    Down,
    Up,
}

impl From<winit::event::ElementState> for KeyState {
    fn from(element_state: winit::event::ElementState) -> Self {
        use winit::event::ElementState;

        match element_state {
            ElementState::Pressed => Self::Down,
            ElementState::Released => Self::Up,
        }
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum Key {
    /// Left mouse button
    LMouseButton,
    /// Non-numpad 1
    Key1,
    /// Non-numpad 2
    Key2,
    /// Non-numpad 3
    Key3,
    /// Non-numpad 4
    Key4,
    /// Non-numpad 5
    Key5,
    /// Non-numpad 6
    Key6,
    /// Non-numpad 7
    Key7,
    /// Non-numpad 8
    Key8,
    /// Non-numpad 9
    Key9,
    /// Non-numpad 0
    Key0,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Escape,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    PrintScreen,
    ScrollLock,
    PauseBreak,
    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,
    /// Left arrow key
    Left,
    /// Up arrow key
    Up,
    /// Right arrow key
    Right,
    /// Down arrow key
    Down,
    BackSpace,
    Return,
    Space,
    Caret,
    Numlock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadDivide,
    NumpadDecimal,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    NumpadMultiply,
    NumpadSubtract,
    Backslash,
    Colon,
    Comma,
    Equals,
    Grave,
    LAlt,
    LBracket,
    LControl,
    LShift,
    LSuper,
    Minus,
    Mute,
    Period,
    PlayPause,
    Plus,
    RAlt,
    RBracket,
    RControl,
    RShift,
    Semicolon,
    Tab,
    VolumeDown,
    VolumeUp,
}

impl Key {
    pub fn from_virtual_keycode(virtual_keycode: winit::event::VirtualKeyCode) -> Option<Self> {
        use winit::event::VirtualKeyCode;

        match virtual_keycode {
            VirtualKeyCode::Key1 => Some(Self::Key1),
            VirtualKeyCode::Key2 => Some(Self::Key2),
            VirtualKeyCode::Key3 => Some(Self::Key3),
            VirtualKeyCode::Key4 => Some(Self::Key4),
            VirtualKeyCode::Key5 => Some(Self::Key5),
            VirtualKeyCode::Key6 => Some(Self::Key6),
            VirtualKeyCode::Key7 => Some(Self::Key7),
            VirtualKeyCode::Key8 => Some(Self::Key8),
            VirtualKeyCode::Key9 => Some(Self::Key9),
            VirtualKeyCode::Key0 => Some(Self::Key0),
            VirtualKeyCode::A => Some(Self::A),
            VirtualKeyCode::B => Some(Self::B),
            VirtualKeyCode::C => Some(Self::C),
            VirtualKeyCode::D => Some(Self::D),
            VirtualKeyCode::E => Some(Self::E),
            VirtualKeyCode::F => Some(Self::F),
            VirtualKeyCode::G => Some(Self::G),
            VirtualKeyCode::H => Some(Self::H),
            VirtualKeyCode::I => Some(Self::I),
            VirtualKeyCode::J => Some(Self::J),
            VirtualKeyCode::K => Some(Self::K),
            VirtualKeyCode::L => Some(Self::L),
            VirtualKeyCode::M => Some(Self::M),
            VirtualKeyCode::N => Some(Self::N),
            VirtualKeyCode::O => Some(Self::O),
            VirtualKeyCode::P => Some(Self::P),
            VirtualKeyCode::Q => Some(Self::Q),
            VirtualKeyCode::R => Some(Self::R),
            VirtualKeyCode::S => Some(Self::S),
            VirtualKeyCode::T => Some(Self::T),
            VirtualKeyCode::U => Some(Self::U),
            VirtualKeyCode::V => Some(Self::V),
            VirtualKeyCode::W => Some(Self::W),
            VirtualKeyCode::X => Some(Self::X),
            VirtualKeyCode::Y => Some(Self::Y),
            VirtualKeyCode::Z => Some(Self::Z),
            VirtualKeyCode::Escape => Some(Self::Escape),
            VirtualKeyCode::F1 => Some(Self::F1),
            VirtualKeyCode::F2 => Some(Self::F2),
            VirtualKeyCode::F3 => Some(Self::F3),
            VirtualKeyCode::F4 => Some(Self::F4),
            VirtualKeyCode::F5 => Some(Self::F5),
            VirtualKeyCode::F6 => Some(Self::F6),
            VirtualKeyCode::F7 => Some(Self::F7),
            VirtualKeyCode::F8 => Some(Self::F8),
            VirtualKeyCode::F9 => Some(Self::F9),
            VirtualKeyCode::F10 => Some(Self::F10),
            VirtualKeyCode::F11 => Some(Self::F12),
            VirtualKeyCode::Snapshot => Some(Self::PrintScreen),
            VirtualKeyCode::Scroll => Some(Self::ScrollLock),
            VirtualKeyCode::Pause => Some(Self::PauseBreak),
            VirtualKeyCode::Insert => Some(Self::Insert),
            VirtualKeyCode::Home => Some(Self::Home),
            VirtualKeyCode::Delete => Some(Self::Delete),
            VirtualKeyCode::End => Some(Self::End),
            VirtualKeyCode::PageDown => Some(Self::PageDown),
            VirtualKeyCode::PageUp => Some(Self::PageUp),
            VirtualKeyCode::Left => Some(Self::Left),
            VirtualKeyCode::Up => Some(Self::Up),
            VirtualKeyCode::Right => Some(Self::Right),
            VirtualKeyCode::Down => Some(Self::Down),
            VirtualKeyCode::Back => Some(Self::BackSpace),
            VirtualKeyCode::Return => Some(Self::Return),
            VirtualKeyCode::Space => Some(Self::Space),
            VirtualKeyCode::Numlock => Some(Self::Numlock),
            VirtualKeyCode::Numpad0 => Some(Self::Numpad0),
            VirtualKeyCode::Numpad1 => Some(Self::Numpad1),
            VirtualKeyCode::Numpad2 => Some(Self::Numpad2),
            VirtualKeyCode::Numpad3 => Some(Self::Numpad3),
            VirtualKeyCode::Numpad4 => Some(Self::Numpad4),
            VirtualKeyCode::Numpad5 => Some(Self::Numpad5),
            VirtualKeyCode::Numpad6 => Some(Self::Numpad6),
            VirtualKeyCode::Numpad7 => Some(Self::Numpad7),
            VirtualKeyCode::Numpad8 => Some(Self::Numpad8),
            VirtualKeyCode::Numpad9 => Some(Self::Numpad9),
            VirtualKeyCode::NumpadAdd => Some(Self::NumpadAdd),
            VirtualKeyCode::NumpadDivide => Some(Self::NumpadDivide),
            VirtualKeyCode::NumpadDecimal => Some(Self::NumpadDecimal),
            VirtualKeyCode::NumpadComma => Some(Self::NumpadComma),
            VirtualKeyCode::NumpadEnter => Some(Self::NumpadEnter),
            VirtualKeyCode::NumpadEquals => Some(Self::NumpadEquals),
            VirtualKeyCode::NumpadMultiply => Some(Self::NumpadMultiply),
            VirtualKeyCode::NumpadSubtract => Some(Self::NumpadSubtract),
            VirtualKeyCode::Backslash => Some(Self::Backslash),
            VirtualKeyCode::Colon => Some(Self::Colon),
            VirtualKeyCode::Comma => Some(Self::Comma),
            VirtualKeyCode::Equals => Some(Self::Equals),
            VirtualKeyCode::Grave => Some(Self::Grave),
            VirtualKeyCode::LAlt => Some(Self::LAlt),
            VirtualKeyCode::LBracket => Some(Self::LBracket),
            VirtualKeyCode::LControl => Some(Self::LControl),
            VirtualKeyCode::LShift => Some(Self::LShift),
            VirtualKeyCode::LWin => Some(Self::LSuper),
            VirtualKeyCode::Minus => Some(Self::Minus),
            VirtualKeyCode::Mute => Some(Self::Mute),
            VirtualKeyCode::Period => Some(Self::Period),
            VirtualKeyCode::PlayPause => Some(Self::PlayPause),
            VirtualKeyCode::Plus => Some(Self::Plus),
            VirtualKeyCode::RAlt => Some(Self::RAlt),
            VirtualKeyCode::RBracket => Some(Self::RBracket),
            VirtualKeyCode::RControl => Some(Self::RControl),
            VirtualKeyCode::RShift => Some(Self::RShift),
            VirtualKeyCode::Semicolon => Some(Self::Semicolon),
            VirtualKeyCode::Tab => Some(Self::Tab),
            VirtualKeyCode::VolumeDown => Some(Self::VolumeDown),
            VirtualKeyCode::VolumeUp => Some(Self::VolumeUp),
            _ => None,
        }
    }
}
